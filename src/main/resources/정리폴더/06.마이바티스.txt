[DAO : KDBC] : 자바랑 데이터베이스를 연결하는 법
    - 자바에서 데이터베이스와 상호작용하기 위한 java 표준 라이브러리
    - SQL 직접 작성하고 실행하면 데이터베이스 연결과 관리를 한다.
    - 주요 인터페이스
        - Connection        : 데이터베이스 연결을 관리
        - PreparedStament   : SQL 실행과 매개변수를 관리
        - ResultSet         : SQL 실행 결과(조회(select) 데이터)

[마이바티스(MyBatis)]
    - JDBC보다 조금 더 다양한 기능을 제공하는 프레임워크
    - 객체와 데이터베이스 간의 매핑을 자동화
    - 주요 특징
        - SQL 결과 자동 매핑 : SQL을 XML파일에 작성하여 자바 객체와 매핑
        - 조회 결과 자동 매핑 : SQL 쿼리 결과를 자동으로 자바 객체로 자동 타입 변환
        - 유연성 : 복잡한 쿼리와 제어도 가능
        - 스프링과 통합이 가능

    - 프로젝트 설치
        [1] JDBC : runtimeOnly 'com.mysql:mysql-connector-j'
        [2] 마이바티스 라이브러리 : implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'

    - application.properties(스프링 프레임워크가 실행될 때 읽어드리는 설정파일)
        - 위치 : src -> main -> resources폴더 하위에 존재해야한다
        - JDBC 연동
            - spring.datasource.url = jdbc:mysql//IP주소:PORT번호/DB이름
            - spring.datasource.username=DB계정명
            - spring.datasource.password=DB계정비밀번호

        - [XML 파일 경로 설정] 마이바티스는 XML파일을 이용하여 자바 객체와 매핑하는 기술
            - 주로 resources 폴더 하위에서 작업
            - .xml 파일이 존재하는 경로를 설정하는 코드
            - mybatis.mapper-location = classpath:resource의 하위 폴더 경로 설정/*.xml

    - 자바와 매핑
        - xml 파일 만들기
            - 설정한 마이바티스 파일 경로에 .xml파일을 만든다. (복잡한 퀴리의 관리가 편함)
            - xml 코드에 DTO와 연동하는 코드 작성
                <?xml version="1.0" encoding="utf-8" ?>
                <!DOCTYPE mapper
                    PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
                    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

            - 해당 xml과 연동할 인터페이스명 설정 ( 경로 : "src -> main -> java부터 경로 시작)
                - 매핑할 인터페이스명이 위치한 경로까지 포함한다.
                    예시) example.day03.mvc2_mybatis.model.mapper.MyMapper
                <mapper namespace = "경로.매핑할 인터페이스명">

                </mapper>

            - <mapper> </mapper> 사이에 SQL마크업 이용한 SQL 작성
                - DML 마크업 지원
                    - <insert> </insert>
                    - <select> </select>
                    - <update> </update>
                    - <delete> </delete>

                ※ 주의할 점: DTO에 존재하지 않는 매개변수명은 자동매핑이 불가능
                - 쿼리의 매개변수 지원
                    <마크업명 parameterType="매개변수DTO">
                        #{매개변수명}
                    </마크업명>

                    - id : 'namespace' 매핑중인 인터페이스명 안에서 매핑할 추상 메소드명
                    - parameterType : SQL문에서 사용할 매개변수 타입명, 추상메소드의 매개변수
                    - resultType : SQL 결과문에서 매핑할 반환타입명, 추상메소드의 반환타입명
                        - 생략할 경우 : 자동으로 SQL이 처리한 레코드 수를 반환(int)

        - 어노테이션을 사용한 매핑(간단한 쿼리에서 많이 사용) (Mapper 인터페이스에서 함수위에 작성)
            - @Insert("SQL문")
            - @Select("SQL문")
            - @Update("SQL문")
            - @Delete("SQL문")