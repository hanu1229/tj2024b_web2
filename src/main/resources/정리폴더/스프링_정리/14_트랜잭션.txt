[ 트랜잭션 ]
    01. 정의 : 데이터베이스에서 여러 연산(명령어)을 하나의 논리적인 작업 단위

    02. 목적 : 데이터의 신뢰성/안정성
        ├── 데이터 무결성 보장 : 여러 연산중에 하나라도 실패하면 모두 실패로 처리
        ├── 원자성 보장 : 여러 연산이 모두 성공해야 결과를 반영
        ├── 일관성 유지 : 트랜잭션의 시작 전과 종료 후는 항상 일관된 상태
        └── 독립성/격리성 : 다른 트랜잭션과는 서로 독립적

    03. 용어
        ├── Transaction : 트랜잭션
        ├── commit : 커밋(최종완료)
        ├── rollback : 롤백(실패 시 돌아가기)
        └── 등등

    04. 사용처
        ├── 예시1 : 은행이체
        │   └── 유재석 계좌에서 100만원을 출금하고
        │       (논리적인 오류 발생) --> 유재석은 100만원을 출금하고 강호동에게 100만원이 입금 안됨
        │       강호동 계좌에 100만원을 입금한다.
        │       ※ 그래서 이체라는 연산을 하나로 처리(트랜잭션)
        └── 예시2 : 주문처리
            └── 주문테이블 정보를 등록하고 주문상세에 정보를 등록하고 재고를 차감
                주문테이블 insert, 주문상세 테이블 insert
                (논리적인 오류 발생) --> 주문 처리만 되고 재고는 차감 안됨
                주문제고 테이블 insert

    05. 스프링에서 트랜잭션 적용하는 방법
        ├── 비지니스로직(서비스 컨트롤러 : 기능의 실질적인/중요한 코드)
            ├── 트랜잭션은 주로 비즈니스 로직에서 처리
                비지니스 로직에서 트랜잭션을 적용할 메소드 위에 '@Transactional'을 작성
                ├── @Transactional의 기본 롤백 발동 조건 : 'RuntimeException'
                └── @Transactional(rollbackFor = Exception.class) : 모든 예외조건에 롤백이 발동