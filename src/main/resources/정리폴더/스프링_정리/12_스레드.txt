[ 용어 정리 ]
    01. 프로그램 : 코드(명령어)의 집합
    02. 프로세스 : 실행중인 프로그램
    03. 멀티 태스킹 : 하나의 프로그램에서 두가지 이상의 작업을 동시 처리
    04. 멀티 프로세스 : 운영체제가 동시에 여러개의 프로세스를 생성하여 처리
        ├─ 멀티 프로세스는 프로그램 단위의 멀티 태스킹
        └─ 멀티 스레드는 프로그램 내부에서의 멀티 태스킹

[ 스레드 ]
    01. 정의
        ├─ 프로세스내에서 실행되는 작업 단위
        └─ 각 프로세스는 최소 1개의 스레드를 포함하고 있음
            └─자바는 main함수가 main스레드를 포함함으로써 하나의 프로세스(프로그램)을 만들 수 있다.
                └─ 자바스크립트에 스레드(main함수)가 존재하지 않는 이유 : 브라우저(프로그램/스레드)가 JS를 읽어드리기 때문이다.
    02. 목적
        └─ 코드(명령어)를 읽어드리고 CPU가 처리한다.
    03. 자바에서의 스레드
        └─ main함수 : public static void main(String[] args) {} 에는 main스레드가 내장되어 있다.

[ 멀티 스레드 ] - Spring에서는 @ASYNC 어노테이션을 쓰면 끝
    01. 정의
        └─ main함수(스레드) 외 새로운 작업 스레드를 생성하는 경우
    02. 목적
        └─ 병렬 처리를 위해서 사용한다.
    03. 사용처
        ├─ 동기화/비동기화 처리(async)
        ├─ 채팅(Socket)/파일처리/REST API/JDBC
        └─ 등등
    04. 사용법
        ├─ Thread 클래스
        │   ├─ 새로운 스레드를 생성할 때 사용되는 클래스
        │   └─ 다른 클래스를 상속받을 수 없다.
        │      └─ 주요 메소드
        │          ├─ run()    : 새로운 스레드가 처리(실행)할 코드를 정의
        │          └─ start()  : 새로운 스레드를 실행
        ├─ Runnable 클래스
        │   ├─ 새로운 스레드를 생성할 때 사용되는 인터페이스
        │   └─ 다른 클래스를 상속받을 수 있다.
        │       └─ 주요 메소드
        │           ├─ run()    : 새로운 스레드가 처리(실행)할 코드를 정의
        │           └─ start()  : 새로운 스레드를 실행
        ├─ Thread 상속
        │   └─ class 클래스명 extends Thread { @Override run() {} }
        ├─ implements Runnable 구현(구현 객체)
        │   └─ class 클래스명 implements Runnable { @Override run() {} }
        └─ 익명 구현체 --> run()이 익명체
            └─ new Thread( new Runnable() { @Override run() {} } );

    05. 용어
        ├─ 클래스와 인터페이스의 차이
        │   ├─ 클래스
        │   │   ├─ 함수의 구현
        │   │   ├─ 멤버변수O
        │   │   └─ 인스턴스(객체)생성 가능(new 가능)
        │   └─ 인터페이스
        │       ├─ 함수의 선언(추상, 버전에 따라 구현도 가능)
        │       ├─ 멤버변수X (단, 상수변수는 가능)
        │       └─ 인스턴스(객체)생성 불가능(new 불가능), 익명객체로 구현하면 가능
        ├─ extends(상속)과 implements(구현)의 차이
        │   ├─ extends는 하나의 클래스만 받을 수 있다(클래스 상속)
        │   └─ implements는 여러개의 인터페이스만 받을 수 있다(인터페이스 상속)
        ├─ 구현 객체
        │   └─ 추상메소드를 갖는 인터페이스를 구현한 클래스의 객체
        └─ 익명 객체
            ├─ 추상메소드를 즉석에서 구현한 객체
            └─ new 인터페이스명() { 추상메소드(); }