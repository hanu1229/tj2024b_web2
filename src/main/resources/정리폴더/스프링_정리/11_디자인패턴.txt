[ 디자인패턴 ]
    01. 정의 : 개발에서 자주 발생하는 문제들을 해결하기 위한 방법
    02. 종류
        02-1. 싱글톤 패턴
                └─ 프로그램내 하나의 객체가 존재해야되는 경우 사용
        02-2. MVC 패턴
                └─ 모델, 뷰, 컨트롤러로 나누어 관리해야하는 경우 사용
        02-3. 팩토리 패턴
                ├─ 객체를 직접 생성하지 않고 팩토리에서 객체를 생성하고 관리하는 경우 사용
                └─ 스프링 컨테이너(팩토리 - BeanFactory)에 빈(객체)를 등록한다. @Component
        03-4. 빌터 패턴
                └─ 복잡한 객체 생성을 유연하게 생성할 경우 사용
                    ├─ 룸북 @Builder
                    └─ StringBuilder

[ @Builder ]
    01. 정의 : 룸북 라이브러리에서 제공하는 빌더 패턴
    02. 목적
        ├─ 복잡한 객체 생성을 직관적으로한다.
        ├─ 가독성 향상
        └─ 매개변수가 많을 때 편리
   03. 주 메소드
        ├─ .builder() : 빌더 객체 생성 함수
        ├─ .필드명(값) : 해당 필드에 값을 설정 (여러개 사용 가능)
        └─ .build() : 최종적으로 객체 생성
   04. 사용법
        ├─ new 생성자명(값, 값) [X]
        └─ 클래스명.builder().필드명1(값).필드명2(값).필드명3(값).build();