[ 암호화 ]
    01. 정의 : 자료를 보호하기 위해서 사람이 이해하기 어려운 문자로 변환 하는 것

    02. 목적
        02-1. 자료 보안 : 해킹으로부터 자료 보호
        02-2. 자료 무결성 유지
        02-3. 등등

    03. 사용처
        03-1. HTTPS - 메시지 (HTTP)암호화
        03-2. 계정 비밀번호 - 암호화
        03-3. 금융 거래 - 암호화
        03-4. 등등

    04. 용어
        04-1. 암호화 : 자료를 사람이 이해하기 어려운 문자로 변환하는 과정
        04-2. 복호화 : 암호화된 자료를 원래 상태로 변환하는 과정
        04-3. 단방향 암호화 : 원래 상태로 변환할수 없는 암호화 방식 --> 주로 해시 방식
        04-4. 양방향 함호화 : 원래 상태로 변환할수 있는 암호화 방식 --> 주로 AES
        04-5. 해시 함수 : 데이터를 고정된 길이로 변환하는 함수
        04-6. 솔트 : 암호화를 할때 사용되는 랜덤값
        04-7. 레인보우 테이블 : 미리 계산된 해시값을 이용하여 복호화하는 방법을 찾는 기법

    05. 실무 암호화 알고리즘
        05-1. 비밀번호 : Bcrypt
        05-2. 파일 검증 : SHA-256
        05-3. HTTP : TLS/SSL
        05-4. 전자 서명 : SHA-256
        05-5. 등등

    06. 비크립트(Bcrypt) - 단방향 암호화
        06-1. 정의 : 해시 함수를 이용하여 주로 비밀번호를 암호화할 때 사용

        06-2. 특징
            2-1. 솔트(salt) : 같은 비밀번호를 랜덤(salt)값으로 서로 다른 암호화된 문자를 만듬
                예시] abc 1234 -> a154b8734~
                예시] abc 4567 -> a354q5431~
                    abc : 평문, 자료 / 1234,4567 : salt

            2-2. 반복 연산 적용 : 해독 하는 속도를 늦춤

            2-3. 원본으로 복구가 불가능
                --> 로그인을 할때 비밀번호 검증은 자료 비교가 아닌 암호화된 해시값을 비교

            2-4. 비크립트 해시 결과
                예시] $2a$10$x2EThyWgOvbtgbUoWWFm6Zuly3oCTMHBrcpZ0EnwF/ykfMDRvycwg0
                    - $2a$ : 비크립트 버전
                    - $10$ : 연산 반복 횟수(2의 제곱근)
                    - x2EThyWgOvbtgbUoWWFm6Zul : salt (22글자)
                    - y3oCTMHBrcpZ0EnwF/ykfMDRvycwg0 : 해시값 (31글자)

            2-5. 스프링에서 비크립트를 사용하는 방법
                5-1. 그레이들에서 비크립트 라이브러리 추가
                    - implementation 'org.springframework.security:spring-security-crypto:6.4.3'
                5-2. 암호화
                    2-1. 객체 생성
                        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
                    2-2. 암호화(인코딩)
                        String hashedPassword = passwordEncoder.encode(memberDto.getMpwd());
                    2-3. 검증(복호화는 불가능 --> 단방향 암호화이기 때문)
                        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
                        boolean result = passwordEncoder.matches(비교할 자료, 암호화된 자료);
                        └─ 일치하면 true, 불일치이면 false