[ 람다식 ]
    01. 정의 : 익명 함수를 간결하게 표현하는 방법
        ├─ JS( => 화살표함수와 비슷)
        └─ 메소드 없이 자바8 이상 문법에 적용

    02. 목적
        ├─ 가독성(간결하게 표현)
        ├─ 코드 양 축소
        ├─ 스트림 API
        ├─ JAVA GUI
        └─ 등등

    03. 주요 함수형 인터페이스
        ├─ Function<매개변수타입, 리턴값타입>
        │   └─ 인터페이스명.apply(인자값);
        │       └─ 인자값을 람다표현식 매개변수로 전달하고 반환값 있음
        ├─ Predicate<매개변수타입>
        │   └─ 인터페이스명.test(인자값);
        │       └─ 인자값을 람다표현식 매개변수로 전달하고 반환값(True, False) 있음
        ├─ Supplier<리턴값타입>
        │   └─ 인터페이스명.get();
        │       └─ 결과값 반환 있음
        ├─ Consumer<매개변수타입>
        │   └─ 인터페이스명.accept(인자값);
        │       └─ 인자값을 람다표현식 매개변수로 전달하고 반환값 없음
        └─ 등등

    04. 사용법
        ├─람다표현은 주로 추상메소드와 같이 사용
        │   ├─ 1.
        │   │   interface 인터페이스명 {
        │   │       반환타입 추상메소드(매개변수타입);
        │   │   }
        │   └─ 2.
        │       (매개변수타입) -> {구현부}
        └─ 주로 컬렉션프레임워크(인터페이스)와 같이 사용
            └─ 리스트명.forEach( () -> {} );

[ 스트림 ]
    01. 정의 : 데이터의 연속된 흐름을 처리하는 방식을 지원
        └─ 주로 컬렉션 프레임워크와 같이 사용

    02. 목적
        ├─ 가독성(간결하게 표현)
        ├─ 코드 양 축소
        └─ 등등

    03. 주요 연산 처리 방법 (스트림에서)
        ├─ 중간연산
        │   ├─ 데이터의 변경 또는 필터를 담당
        │   ├─ filter()
        │   ├─ map()
        │   ├─ sorted()
        │   ├─ distinct()
        │   └─ 등등
        └─ 최종연산
            └─ 데이터의 결과를 반환
                ├─ forEach()
                ├─ collect()
                ├─ count()
                ├─ reduce()
                └─ 등등

[ 메소드 레퍼런스 API ]
    01. 정의
        ├─ 이미 정의된 함수/생성자를 호출하는 기능
        └─ 람다식보다 더 간결하게 표현하는 방법
            -> 주의할 점 : 정의되지 않는 메소드에 대해서는 사용 불가능

    02. 목적
        ├─ 가독성(간결한 코드 향상)
        ├─ 리팩토링과 유지보수 용이
        └─ 등등

    03. 사용법
        ├─ static메소드를 호출하는 방법
        │   └─ 클래스명::static메소드명
        ├─ 일반메소드를 호출하는 방법
        │   └─ 객체명::메소드명
        └─ 생성자를 호출하는 방법
            └─ 클래스명::new --> 생성자 호출

    04. 사용처
        └─ stream()에서의 람다 표현식을 간소화할 때 사용(이미 정의된 메소드를 호출할 때 사용)