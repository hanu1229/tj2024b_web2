[CORS] : Cross-Origin Resource Sharing
    01. 정의 : 서로 다른 도메인(HTTP주소 : http://ip:port)의 요청과 응답을 허용하는 정책

    02. 목적 : 기본적으로 브라우저는 보안상의 이유로 CORS를 차단, 쿠키(세션)/인증 공유가 불가능
        - SOP(Same-Origin Policy) : 동일한 도메인끼리만 통신

    03. 적용사례
        03-1. 개발단계
            - 리액트 : http://localhost:5173
            - 스프링 : http://localhost:8080

        03-2. 배포(운영) 단계
            - 방법1 : 서버를 2개로 그대로 운영
            - 방법2 : 리액트의 결과물인 정적파일들을 스프링에서 (통합) 관리하여 운영

    04. 서로 다른 도메인간의 CORS 허용 방법
        - 스프일 방법1 : 스프링 설정 클래스 생성
            - @Configuration
              public class CorsConfig implements WebMvcConfigurer {
                public void addCorsMappings(CorsRegistry registry) {
                    - registry.addMapping("/**")
                        - 모든 스프링 컨트롤러를 매핑

                    - registry.addMapping("/member")
                        - member 컨트롤러만 매핑

                    - registry.allowedOrigins("http://localhost:5173", "http://localhost:5174")
                        - 허용할 출처(도메인)

                    - registry.allowedMethods("GET", "POST", "PUT", "DELETE")
                        - 허용할 HTTP 메소드

                    - registry.allowedHeaders("*")
                        - HTTP의 헤더정보 허용

                    - registry.allowCredentials(true/false)
                        - HTTP의 쿠키/인증을 허용
                }
              }

    04. 리액트에서 서로 다른 서버(도메인:8080)에게 요청 보내기
        04-1. axios, fetch 주의할 점 : 쿠키(세션) 유지 안된다.
        04-2. 해결방안 : 세션(쿠키)/인증을 사용하는 REST API대해서 Credentials = true를 허용해야 한다
                - axios.XXX("URL/XXX/XXX", {withCredentials : true});